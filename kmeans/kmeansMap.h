// C++ implementation of K-Means clustering for n-dimensional data.
//
// This class follows the standard Expectation-Maximization iterative algorithm,
// also known by Lloyd's algorithm:
//   Repeat until convergence:
//      - Assign all points to the nearest cluster.
//      - Compute the cluster mean based on its assigned points.
//   Convergence is when the cluster assignment doesn't change.
//   The initialization of the means uses k random points from the data.
//
// Author: Felix Duvallet

#ifndef __KMEANS_KMEANSMAP_H__
#define __KMEANS_KMEANSMAP_H__

#include <map>
#include <string>
#include <vector>

#include "point.h"
#include "kmeans.h"

class KMeansMap: public KMeans {
    int dim;
 public:
  // K is the number of clusters we want. Max iterations is just to prevent
  // running forever.
  KMeansMap(int k = 2, int max_iterations = 100, int dim = 2);

  bool init_mr(const std::vector<Point> &points,
              const std::vector<Point> &means);

  bool runOneStep();
    int itsDim() {
        return dim;
    };
  const std::vector<std::pair<Point,int>> & get_result() const{
    return result;
  }

  int resultLen(void);

  void resultToBuf(void*buf, int bufLen);

  void printResult(void);

 protected:

  // Compute the sum in each cluster.
  bool update_sums();
#if CAL_SUM_DIRECT
  bool init_result();
#endif
  // Computes a new cluster sum (output parameter sum) using the points in
  // that cluster. The multimap is mapping from cluster_id -> Point* (it is
  // generated by update_means).
  void computeClusterSum(
    const std::multimap<int, const Point *> &multimap,
    int cluster,
    Point *sum,
    int *points_num);

  //std::vector<std::pair<Point,int>> result; //<sum of cluster, points num of cluster>
};

#endif  // __KMEANS_KMEANSMAP_H__
